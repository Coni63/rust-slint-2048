import { Button, VerticalBox , GridBox, HorizontalBox} from "std-widgets.slint";


export component Tile inherits Rectangle {
    in property<int> value: 0;
    width: 64px;
    height: 64px;
    background: get_color();
    border-radius: 4px;
    
    Text {
        text: value > 0 ? value : "";
        color: value > 2048 ? #F9F6F2 : #3C3A32;
        font-size: value < 1000 ? 30px : value < 10000 ? 25px : 20px;
        horizontal-alignment: center;
        vertical-alignment: center;
    }

    function get_color() -> brush {
        if (value == 0) {return #C0B3A6;}
        else if (value == 2) {return #EEE4DA;}
        else if (value == 4) {return #EDE0C8;}
        else if (value == 8) {return #F2B179;}
        else if (value == 16) {return #F59563;}
        else if (value == 32) {return #F67C5F;}
        else if (value == 64) {return #F65E3B;}
        else if (value == 128) {return #EDCF72;}
        else if (value == 256) {return #EDCC61;}
        else if (value == 512) {return #EDC850;}
        else if (value == 1024) {return #EDC53F;}
        else if (value == 2048) {return #EDC22E;}
        else {return #3C3A32;}
    }
}


export component GameOver {
    Rectangle {
        width: 250px;
        height: 80px;
        background: #ce350f;
        border-radius: 8px;
        Text {
            text: "Game Over !";
            color: #F9F6F2;
            font-size: 40px;
            horizontal-alignment: center;
            vertical-alignment: center;
        }
    }
}


export component Board inherits Rectangle {
    in-out property<[int]> values;
    GridBox {
        padding: 0px;
        spacing: 8px;
        Row {
            Tile {
                value: values[0];
            }
            Tile {
                value: values[1];
            }
            Tile {
                value: values[2];
            }
            Tile {
                value: values[3];
            }
        }
        Row {
            Tile {
                value: values[4];
            }
            Tile {
                value: values[5];
            }
            Tile {
                value: values[6];
            }
            Tile {
                value: values[7];
            }
        }
        Row {
            Tile {
                value: values[8];
            }
            Tile {
                value: values[9];
            }
            Tile {
                value: values[10];
            }
            Tile {
                value: values[11];
            }
        }
        Row {
            Tile {
                value: values[12];
            }
            Tile {
                value: values[13];
            }
            Tile {
                value: values[14];
            }
            Tile {
                value: values[15];
            }
        }
    }
} 


export component AppWindow inherits Window {
    in property<int> score: 0;
    in-out property<[int]> values: [0, 2, 4, 8, 16, 32, 64, 128, 1024, 4096, 8192, 16384, 65536, 262144, 0, 0];
    in property <string> seed: 0;
    in property <bool> game_over: false;

    background: #AD9D90;

    callback restart(string);
    callback play(int);
    callback exit();

    title: "2048 in Rust";
    VerticalBox {
        padding: 16px;
        Text {
            text: "2048";
            font-size: 30px;
            horizontal-alignment: center;
            color: #3C3A32;
        }
        Text {
            text: "Score: " + score;
            font-size: 20px;
            color: #3C3A32;
        }
        Board {
            values: values;
        }

        HorizontalBox {
            spacing: 8px;
            VerticalBox {
                spacing: 0px;
                Text {
                    text: "Seed:";
                }            
                seed_input := TextInput {
                    text: seed;
                    color: #3C3A32;
                    font-size: 20px;
                }
            }
            Button {
                text: "Restart";
                clicked => {
                    restart(seed_input.text);
                }
            }
        }
    }

    if (game_over): GameOver {}


    my-key-handler := FocusScope {
        key-pressed(event) => {
            if (event.text == Key.UpArrow) {
                play(1);
            } else if (event.text == Key.LeftArrow) {
                play(2);
            } else if (event.text == Key.DownArrow) {
                play(3);
            } else if (event.text == Key.RightArrow) {
                play(4);
            } else if (event.text == Key.Escape) {
                exit();
            }
            accept
        }
    }
}
